<?php
/**
 * Example for AES encryption/decryption + HMAC
 * used during the Dutch PHP Conference 2014 talk
 * by Enrico Zimuel
 *
 * @author Enrico Zimuel (enrico@zimuel.it)
 */

function AES_encrypt($text, $key) {
    // Padding PKCS#7
    $text    = PKCS7_pad($text, 16);

    // Random IV
    $iv      = mcrypt_create_iv(16, MCRYPT_DEV_URANDOM);

    // Encryption key generated by PBKDF2 (since PHP 5.5)
    $keys    = hash_pbkdf2('sha256', $key, $iv, 10000, 64);
    $encKey  = substr($keys, 0, 32); // 256 bit encryption key
    $hmacKey = substr($keys, 32);    // 256 bit hmac key 

    // Encryption
    $ciphertext = mcrypt_encrypt('rijndael-128', $encKey, $text, 'cbc', $iv);
    // $ciphertext = openssl_encrypt($text, 'AES-256-CBC', $encKey, OPENSSL_NO_PADDING, $iv);
    $hmac = hash_hmac('sha256', $iv . $ciphertext, $hmacKey); 

    return $hmac . $iv . $ciphertext;
}

function AES_decrypt($text, $key) {
    $hmac = substr($text, 0, 64);  // 64 bytes HMAC size
    $iv   = substr($text, 64, 16); // 16 bytes IV size
    $text = substr($text, 80);

    // Generate the encryption and hmac keys
    $keys    = hash_pbkdf2('sha256', $key, $iv, 10000, 64);
    $encKey  = substr($keys, 0, 32); // 256 bit encryption key
    $hmacKey = substr($keys, 32);    // 256 bit hmac key 

    $hmacNew = hash_hmac('sha256', $iv . $text, $hmacKey);
    if (!compareStrings($hmac, $hmacNew)) {
        return false;
    }
    // Decryption
    $result = mcrypt_decrypt('rijndael-128', $encKey, $text, 'cbc', $iv);
    // $result = openssl_decrypt($text, 'AES-256-CBC', $encKey, OPENSSL_NO_PADDING, $iv);
    return PKCS7_unpad($result);
}

/**
 * Pad a string using PKCS#7
 *
 * @param  string $text
 * @param  string $blockSize
 * @return string
 */
function PKCS7_pad($text, $blockSize)
{
    $pad = $blockSize - (strlen($text) % $blockSize);
    return $text . str_repeat(chr($pad), $pad);
}

/**
 * Unpad a string using PKCS#7
 *
 * @param  string $text
 * @return string|bool
 */
function PKCS7_unpad($text)
{
    $end  = substr($text, -1);
    $last = ord($end);
    $len  = strlen($text) - $last;
    if (substr($text, $len) == str_repeat($end, $last)) {
        return substr($text, 0, $len);
    }
    return false;
}

/**
 * Compare two strings in constant time to avoid timing attacks
 *
 * @param  string $expected
 * @param  string $actual
 * @return boolean
 */
function compareStrings($expected, $actual)
{
    $expected = (string) $expected;
    $actual = (string) $actual;
    $lenExpected = strlen($expected);
    $lenActual = strlen($actual);
    $len = min($lenExpected, $lenActual);

    $result = 0;
    for ($i = 0; $i < $len; $i++) {
        $result |= ord($expected[$i]) ^ ord($actual[$i]);
    }
    $result |= $lenExpected ^ $lenActual;

    return ($result === 0);
}
